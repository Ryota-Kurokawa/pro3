科目名: プログラミング実習III
課題: B2
番号: 37022443
氏名: 黒川良太
作成: 10/7

----------------------------------------

[課題1]
double 型の配列 a とその サイズ n, および整数 k (0≤k<n) が与えられたときに, 次の処理を行う関数 void swapmin(int n, double *a, int k) を作成せよ.

a[k]〜a[n-1] の中の最小値を a[i] とするとき, a[k] と a[i] の値を交換する.
関数は swapmin.c に格納し, 下記の swapmin_test.c とリンクして動作確認せよ.

swapmin_test.c は, 配列 a にデータを入力した後, k を入力して swapmin(n, a, k) を実行しては配列 a の内容を出力する, という動作を繰り返す (プログラムを読んで理解せよ).

自分で適切な入力を与えて, swapmin の動作が正しいことを確認せよ.

(1) n = 5,   a = 5, 4, 3, 2, 1,   k = 0 を入力 →   a = 1, 4, 3, 2, 5 となることを確認せよ.

(2) n = 5,   a = 5, 4, 3, 1, 2   k = 1 を入力 →   a = 5, 1, 3, 4, 2 となることを確認せよ.

(3) n = 5,   a = 6, 2, 4, 9, 8   に対して, k = 0, 1, 2, 3 を続けて入力すると a が昇順にソートされることを確認せよ. (下線はソート済みであることを表わす.)

k = 0 を入力 →   a = 2, 6, 4, 9, 8
k = 1 を入力 →   a = 2, 4, 6, 9, 8
k = 2 を入力 →   a = 2, 4, 6, 9, 8
k = 3 を入力 →   a = 2, 4, 6, 8, 9


結果
k = 1
swapmin(n, a, 1)
[0]    2.00000
[1]    4.00000
[2]    6.00000
[3]    9.00000
[4]    8.00000
k = 2
swapmin(n, a, 2)
[0]    2.00000
[1]    4.00000
[2]    6.00000
[3]    9.00000
[4]    8.00000
k = 3
swapmin(n, a, 3)
[0]    2.00000
[1]    4.00000
[2]    6.00000
[3]    8.00000
[4]    9.00000



----------------------------------------

[課題2]
課題 (7-1) の swapmin の動作を k=0〜n-2 について行えば, a[0]〜a[n-1] を昇順にソートできる. この考え方に基づくソーティングのアルゴリズムを「単純選択法」と言う. 単純選択法により a[0]〜a[n-1] のソートを行う関数 void sort(int n, double *a) を作成し, selection_sort.c に格納せよ.


結果
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 -0.1
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6



----------------------------------------

[課題3]
double 型の配列 a とその サイズ n, および整数 k (1≤k<n) が与えられたときに, 次の処理を行う関数 void insert(int n, double *a, int k) を作成せよ.

a[k] と a[k-1] を比較する. a[k]≥a[k-1] なら終了. a[k]<a[k-1] なら a[k] と a[k-1] の値を交換し, 処理を続ける.
a[k-1] と a[k-2] を比較する. a[k-1]≥a[k-2] なら終了. a[k-1]<a[k-2] なら a[k-1] と a[k-2] の値を交換し, 処理を続ける.
a[k-2] と a[k-3] を比較する. a[k-2]≥a[k-3] なら終了. a[k-2]<a[k-3] なら a[k-2] と a[k-3] の値を交換し, 処理を続ける.
…
a[1] と a[0] を比較する. a[1]≥a[0] なら終了. a[1]<a[0] なら a[1] と a[0] の値を交換する (ここまで来れば終了).
a[0]〜a[k-1] が既にソートされていると, この処理により a[k] は a[0]〜a[k-1] の間の適切な位置に挿入され, その結果 a[0]〜a[k] がソートされることになる.



結果
n = 5
[0] : 6
[1] : 2
[2] : 4
[3] : 9
[4] : 8
[0]    6.00000
[1]    2.00000
[2]    4.00000
[3]    9.00000
[4]    8.00000
k = 1
insert(n, a, 1)
[0]    2.00000
[1]    6.00000
[2]    4.00000
[3]    9.00000
[4]    8.00000
k = 2
insert(n, a, 2)
[0]    2.00000
[1]    4.00000
[2]    6.00000
[3]    9.00000
[4]    8.00000
k = 3
insert(n, a, 3)
[0]    2.00000
[1]    4.00000
[2]    6.00000
[3]    9.00000
[4]    8.00000
k = 4
insert(n, a, 4)
[0]    2.00000
[1]    4.00000
[2]    6.00000
[3]    8.00000
[4]    9.00000

----------------------------------------

[課題4]

課題 (7-3) の insert の動作を k=1〜n-1 について行えば, a[0]〜a[n-1] を昇順にソートできる. この考え方に基づくソーティングのアルゴリズムを「単純挿入法」と言う. 単純挿入法により a[0]〜a[n-1] のソートを行う関数 void sort(int n, double *a) をファイル insertion_sort.c に作成せよ.



結果

 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 0.0 1.1 3.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 0.0 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 1.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 1.1
 -0.1 -0.1 -0.1 -0.1
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6


----------------------------------------

[課題5]次は, ソートの計算に要する時間を計測するプログラム sort_cpu.c の原型 (未完成) である. 下記の指示に従ってプログラムを完成させよ.



結果
乱数
       16807.00000
   282475249.00000
  1622650073.00000
   984943658.00000
  1144108930.00000
   470211272.00000
   101027544.00000
  1457850878.00000
n = 1024
CPU time = 0.002320
n = 2048
CPU time = 0.007888
n = 4096
CPU time = 0.022600
n = 8192
CPU time = 0.069714
n = 16384
CPU time = 0.276191
n = 32768
CPU time = 1.099532
n = 65536
CPU time = 4.399428
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 1024
CPU time = 0.001098
n = 2048
CPU time = 0.004325
n = 4096
CPU time = 0.017248
n = 8192
CPU time = 0.068931
n = 16384
CPU time = 0.274090
n = 32768
CPU time = 1.093138
n = 65536
CPU time = 4.396128
逆順
       65536.00000
       65535.00000
       65534.00000
       65533.00000
       65532.00000
       65531.00000
       65530.00000
       65529.00000
n = 1024
CPU time = 0.001236
n = 2048
CPU time = 0.004915
n = 4096
CPU time = 0.019508
n = 8192
CPU time = 0.077355
n = 16384
CPU time = 0.308467
n = 32768
CPU time = 1.230349
n = 65536
CPU time = 4.961127

約4倍ずつ変化していることがわかる。

最適化した時の結果

乱数
       16807.00000
   282475249.00000
  1622650073.00000
   984943658.00000
  1144108930.00000
   470211272.00000
   101027544.00000
  1457850878.00000
n = 1024
CPU time = 0.003852
n = 2048
CPU time = 0.011310
n = 4096
CPU time = 0.030353
n = 8192
CPU time = 0.087458
n = 16384
CPU time = 0.257681
n = 32768
CPU time = 0.887369
n = 65536
CPU time = 2.932443
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 1024
CPU time = 0.001620
n = 2048
CPU time = 0.004525
n = 4096
CPU time = 0.013785
n = 8192
CPU time = 0.037860
n = 16384
CPU time = 0.122604
n = 32768
CPU time = 0.592678
n = 65536
CPU time = 2.316369
逆順
       65536.00000
       65535.00000
       65534.00000
       65533.00000
       65532.00000
       65531.00000
       65530.00000
       65529.00000
n = 1024
CPU time = 0.002306
n = 2048
CPU time = 0.006203
n = 4096
CPU time = 0.015721
n = 8192
CPU time = 0.043668
n = 16384
CPU time = 0.125090
n = 32768
CPU time = 1.561513
n = 65536
CPU time = 4.482586

insertion_sort.c sort_cpuの場合
（初期値の範囲狭）
kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % gcc sort_cpu.c insert_sort.c    
kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % ./a.out                     
乱数
       16807.00000
   282475249.00000
  1622650073.00000
   984943658.00000
  1144108930.00000
   470211272.00000
   101027544.00000
  1457850878.00000
n = 2
CPU time = 0.000008
n = 4
CPU time = 0.000001
n = 8
CPU time = 0.000002
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 2
CPU time = 0.000001
n = 4
CPU time = 0.000000
n = 8
CPU time = 0.000001
逆順
           8.00000
           7.00000
           6.00000
           5.00000
           4.00000
           3.00000
           2.00000
           1.00000
n = 2
CPU time = 0.000001
n = 4
CPU time = 0.000001
n = 8
CPU time = 0.000001

最適化した時の結果
kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % gcc -o2 sort_cpu.c insert_sort.c
kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % ./a.out
乱数
       16807.00000
   282475249.00000
  1622650073.00000
   984943658.00000
  1144108930.00000
   470211272.00000
   101027544.00000
  1457850878.00000
n = 2
CPU time = 0.000005
n = 4
CPU time = 0.000000
n = 8
CPU time = 0.000000
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 2
CPU time = 0.000000
n = 4
CPU time = 0.000001
n = 8
CPU time = 0.000001
逆順
           8.00000
           7.00000
           6.00000
           5.00000
           4.00000
           3.00000
           2.00000
           1.00000
n = 2
CPU time = 0.000000
n = 4
CPU time = 0.000001
n = 8
CPU time = 0.000001

kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % gcc sort_cpu.c insert_sort.c 
kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % ./a.out
乱数
       16807.00000
   282475249.00000
  1622650073.00000
   984943658.00000
  1144108930.00000
   470211272.00000
   101027544.00000
  1457850878.00000
n = 1024
CPU time = 0.002197
n = 2048
CPU time = 0.007878
n = 4096
CPU time = 0.031501
n = 8192
CPU time = 0.104791
n = 16384
CPU time = 0.418818
n = 32768
CPU time = 1.685067
n = 65536
CPU time = 6.762257
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 1024
CPU time = 0.000005
n = 2048
CPU time = 0.000008
n = 4096
CPU time = 0.000017
n = 8192
CPU time = 0.000031
n = 16384
CPU time = 0.000059
n = 32768
CPU time = 0.000117
n = 65536
CPU time = 0.000233
逆順
       65536.00000
       65535.00000
       65534.00000
       65533.00000
       65532.00000
       65531.00000
       65530.00000
       65529.00000
n = 1024
CPU time = 0.003247
n = 2048
CPU time = 0.013100
n = 4096
CPU time = 0.052771
n = 8192
CPU time = 0.209388
n = 16384
CPU time = 0.844302
n = 32768
CPU time = 3.385574
n = 65536
CPU time = 13.528867

insertion_sort.c sort_cpuの場合（最適化）
kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % gcc -O2 sort_cpu.c insert_sort.c   
kurokawaryouta@kurokawaryoutanoMacBook-Air 5 % ./a.out
乱数
       16807.00000
   282475249.00000
  1622650073.00000
   984943658.00000
  1144108930.00000
   470211272.00000
   101027544.00000
  1457850878.00000
n = 1024
CPU time = 0.000816
n = 2048
CPU time = 0.004941
n = 4096
CPU time = 0.016950
n = 8192
CPU time = 0.051179
n = 16384
CPU time = 0.204760
n = 32768
CPU time = 0.825677
n = 65536
CPU time = 3.302158
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 1024
CPU time = 0.000002
n = 2048
CPU time = 0.000002
n = 4096
CPU time = 0.000003
n = 8192
CPU time = 0.000007
n = 16384
CPU time = 0.000011
n = 32768
CPU time = 0.000020
n = 65536
CPU time = 0.000038
逆順
       65536.00000
       65535.00000
       65534.00000
       65533.00000
       65532.00000
       65531.00000
       65530.00000
       65529.00000
n = 1024
CPU time = 0.001532
n = 2048
CPU time = 0.006296
n = 4096
CPU time = 0.025364
n = 8192
CPU time = 0.101815
n = 16384
CPU time = 0.408975
n = 32768
CPU time = 1.649141
n = 65536
CPU time = 6.624467

----------------------------------------

[課題6]
クイックソートにより配列 a の先頭から n 個のデータのソートを行う関数 void sort(int n, double *a) を作成せよ (quick_sort.c に格納せよ).

下記のアウトラインを参考にせよ. (クイックソートは挙動が非常に微妙なので, アウトラインに忠実にプログラミングすること.)



結果
乱数
       16807.00000
   282475249.00000
  1622650073.00000
   984943658.00000
  1144108930.00000
   470211272.00000
   101027544.00000
  1457850878.00000
n = 1000
CPU time = 0.000089
n = 2000
CPU time = 0.000179
n = 4000
CPU time = 0.000363
n = 8000
CPU time = 0.000763
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 1000
CPU time = 0.000369
n = 2000
CPU time = 0.001421
n = 4000
CPU time = 0.005413
n = 8000
CPU time = 0.022116
逆順
       10000.00000
        9999.00000
        9998.00000
        9997.00000
        9996.00000
        9995.00000
        9994.00000
        9993.00000
n = 1000
CPU time = 0.000366
n = 2000
CPU time = 0.001327
n = 4000
CPU time = 0.004328
n = 8000
CPU time = 0.016793


----------------------------------------

[課題]

結果

----------------------------------------

[課題]




結果
----------------------------------------

[課題]




結果
----------------------------------------

[課題]




結果





[課題 R の感想]
