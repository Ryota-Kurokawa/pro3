科目名: プログラミング実習III
課題: B9
番号: 37022443
氏名: 黒川良太
作成: 12/9

----------------------------------------

[課題1]
List 9.1 のプログラムを入力し (コメントは省略して良い), コンパイル, 実行した後, プログラムに
適当な修正を加え, 何か好きなものを計算するプログラムを作成せよ.

結果　
hello
n = 0.5
0.5 m 50cm

mをcmに変換するプログラムであるためそこまで難解なものではなく、小数が含まれるものにも対応している。
----------------------------------------

[課題2]
2 つの整数型のデータの内容を交換する関数 swap(int&, int&) を作成し, 実行結果を確認せよ.

結果
a = 100, b = 20
a = 20, b = 100

Cでの知識を活かせて嬉しい！！Swapに関してc＋＋でも使えるので覚えておきたい。
----------------------------------------

[課題3]
スタックのプログラムを入力し ([List 9.11], [List 9.12], [List 9.13] をこの順に一つのファイルに打ち
込む), コンパイルし実行してみよ. 実験状況・感想とともに, 作成したプログラムをレポートに添付すること.

```

#include <iostream>
#include <assert.h> // assert を使うためのヘッダ
class stack
{
private:
  static const int max = 100;
  int data[max];
  int sp;

public:
  void push(int);     // データをプッシュする
  void pop();         // データをポップする
  bool empty() const; // スタックが空のとき true を返す
  int top() const;    // スタックトップのデータを返す
  int size() const;   // 現在格納されているデータ数を返す
  stack();            // コンストラクタ
  ~stack();           // デストラクタ
};

void stack::push(int d)
{
  assert(sp < max);
  data[sp++] = d;
}
void stack::pop()
{
  assert(0 < sp);
  --sp;
}
bool stack::empty() const
{
  return sp == 0;
}
int stack::top() const
{
  return data[sp - 1];
}
int stack::size() const
{
  return sp;
}
stack::stack() { sp = 0; }
stack::~stack() {}

int main(void)
{
  stack s;                            // stack 型変数の宣言
  s.push(5);                          // s = (5)
  s.push(8);                          // s = (5 8)
  s.push(9);                          // s = (5 8 9)
  std::cout << s.top() << std::endl;  // 9 を表示
  s.pop();                            // s = (5 8)
  std::cout << s.top() << std::endl;  // 8 を表示
  s.pop();                            // s = (5)
  s.push(3);                          // s = (5 3)
  std::cout << s.size() << std::endl; // s のサイズは 2
  while (!s.empty())
  {
    std::cout << s.top() << std::endl;
    s.pop();
  }
  return 0;
}

```


結果
9
8
2
3
5
感想
書き方が基本的に難しく感じた。Cとやはり思っている以上に違っており苦戦した。
----------------------------------------

[課題4]
前の演習で作成したスタックのプログラムを, 配列を動的に割当てるバージョンに変更せよ. コンスト
ラクタ中で max の値を表示するなどして, 指定したサイズの配列が割当てられていることを確認せよ.
※ 上記リストの 12.1 行目のように, max に値を代入する場合, max の宣言が static const int (定数の int)
のままではではまずい (定数ではなくなるので).
※ 当然だが, data の宣言が int data[max] のままなのもまずい. data をポインタとして宣言すること.

結果

Max size: 100
9
8
2
3
5

感想

動的な割り当てについて復習になったとともにC++の書き方を学べたのは良かったと思う
----------------------------------------

[課題5]
stack に equal(const stack&, const stack&) を追加したバージョンを作成し, 動作を確認せよ.
☆ フレンド関数は, 便利ではあるが, せっかくのデータ隠蔽をあっさり破壊してしまうため, 乱用は避けるべき
(本当に必要なケースはほとんどない) とされている.

結果

1
0
感想
フレンド関数について少し知識が増えてもう少し調べてみようと思った。
----------------------------------------

[課題6]
上の [List 9.22], [List 9.23] をコンパイルし, 結果を確認せよ. その後, double 型の引数 r をひと
つだけとって, 実部に r の値を設定し虚部には 0 を設定するようなコンストラクタ Complex(double) を作成し,
main(void) にそれを使うコードを追加せよ.

結果
1.11+2.22i
3.33+4.44i
9.99+88.88i
1.11+2.22i
7.77+0i

感想
複素数についてのプログラミングでどう表現するのかを知れて良かった。
----------------------------------------

[課題7]
Complex に対する減算, 乗算を定義し, 次のようなメインルーチンで実行結果を確かめよ.
結果
-0.65+1.32i
-5+10i

感想
関数のの作り方という点ではC++の優位性をCと比べて感じた
----------------------------------------

[課題8]
上の [List 9.29] を実行してその結果を示せ. (プログラムを提出せよ.)

結果
1+2i
1+3i
1+2i
2+3i
2+4i
2+3i

感想
複素数に関しての理解やC++についての理解が1回分の課題と思えないほど深まったので引き続き復習していきたい。
----------------------------------------

[課題 R の感想]
初めてC++を触ったのだがやはり書き方が難しくなれなかったため課題を解くのに少し苦労した。もう少し自分で勉強していきたいと思う。